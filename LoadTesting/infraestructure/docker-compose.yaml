services:
  # Backend
  backend-services:
    container_name: backend-services
    build:
      context: ${CONTEXT}
      dockerfile: ./infraestructure/Dockerfile
    environment:
      ASPNETCORE_HTTP_PORTS: "8000"
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ${CONTEXT}/infraestructure/dbsettings.json:/webapp/dbsettings.json
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/Products"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Base de datos
  mysql:
    image: mysql:9
    container_name: mysql_container
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${BD_PASSWORD}
      MYSQL_DATABASE: ${DATABASE}
    volumes:
      - ${CONTEXT}/infraestructure/BD:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "mysql -u root -p${BD_PASSWORD} --execute 'SELECT @@GLOBAL.version;'"]
      interval: 2s
      retries: 60
    networks:
      - app-network

  jmeter:
    image: justb4/jmeter
    container_name: jmeter
    volumes:
      - ${CONTEXT}/jmeter:/jmeter
      - ${CONTEXT}/infraestructure/entrypoint.sh:/entrypoint.sh
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    depends_on:
      backend-services:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "1099:1099"


networks:
  app-network:
    driver: bridge